Given an array of citations (each citation is a non-negative integer) of a researcher, write a function to compute the researcher's h-index.
According to the definition of h-index on Wikipedia:
    "A scientist has index h if h of his/her N papers have at least h citations each, and the other N âˆ’ h papers have no more than h citations each."

Example:
Input: citations = [3,0,6,1,5]
Output: 3 
Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had 
             received 3, 0, 6, 1, 5 citations respectively. 
             Since the researcher has 3 papers with at least 3 citations each and the remaining 
             two with no more than 3 citations each, her h-index is 3.
Note: If there are several possible values for h, the maximum one is taken as the h-index.

O(n) Approach: Used bucket sort 
Assume we have N buckets, from 0..N-1, one for each paper.
  for each paper, if the number of citations n < N, put that paper in the n-th bucket
  if n >= N, put that in that N-1-th bucket

class Solution {
public:
    int hIndex(vector<int>& citations) {
        int N = citations.size();
        vector<int> bucket(N+1, 0);
        
        for(auto i: citations){
            if(i>=N){
                bucket[N]++;
            }
            else{
                bucket[i]++;
            }
        }
        
        int count=0;
        for(int i=N;i>=0;i--) {
            count += bucket[i];
            if(count>=i){
                return i;
            }
        }
        
        return 0;
    }
};
