Implement the StreamChecker class as follows:

StreamChecker(words): Constructor, init the data structure with the given words.
query(letter): returns true if and only if for some k >= 1, the last k characters queried (in order from oldest to newest, including this letter just queried) spell one of the words in the given list.
 

Example:

StreamChecker streamChecker = new StreamChecker(["cd","f","kl"]); // init the dictionary.
streamChecker.query('a');          // return false
streamChecker.query('b');          // return false
streamChecker.query('c');          // return false
streamChecker.query('d');          // return true, because 'cd' is in the wordlist
streamChecker.query('e');          // return false
streamChecker.query('f');          // return true, because 'f' is in the wordlist
streamChecker.query('g');          // return false
streamChecker.query('h');          // return false
streamChecker.query('i');          // return false
streamChecker.query('j');          // return false
streamChecker.query('k');          // return false
streamChecker.query('l');          // return true, because 'kl' is in the wordlist


struct node
{
    bool end;
    node* next[26];
    node()
    {
        end=0;
        for(int i=0;i<26;i++)
        {
            next[i]=NULL;
        }
    }
};
class StreamChecker {
public:
    node* root=new node();
    string s="";
    StreamChecker(vector<string>& words) {
        for(auto x : words)
        {
            reverse(x.begin(),x.end());
            node* temp=root;
            for(int i=0;i<x.size();i++)
            {
                if(temp->next[x[i]-'a']==NULL)
                {
                    temp->next[x[i]-'a']=new node();
                }
                temp=temp->next[x[i]-'a'];
            }temp->end=1;
        }
    }
    bool search(node* root,int i,string &s)
    {
        if(root->end==1){return 1;}
        if(i<0){return 0;}
        if(root->next[s[i]-'a']!=NULL)
        {
            return search(root->next[s[i]-'a'],i-1,s);
        }
        return 0;
    }
    
    bool query(char letter) {
        s+=letter;
        return search(root,s.size()-1,s);
    }
};
/**
 * Your StreamChecker object will be instantiated and called as such:
 * StreamChecker* obj = new StreamChecker(words);
 * bool param_1 = obj->query(letter);
 */
