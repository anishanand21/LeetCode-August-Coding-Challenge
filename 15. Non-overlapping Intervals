Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

Example 1:
Input: [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of intervals are non-overlapping.

Example 2:
Input: [[1,2],[1,2],[1,2]]
Output: 2
Explanation: You need to remove two [1,2] to make the rest of intervals non-overlapping.

Example 3:
Input: [[1,2],[2,3]]
Output: 0
Explanation: You don't need to remove any of the intervals since they're already non-overlapping.


bool comp(vector<int> &a,vector<int> &b) {
	return a[1]<b[1];                     //Sort intervals based on their end points
}

class Solution {
public:
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        int ans = 0, pre_end = INT_MIN;
        
        sort(intervals.begin(), intervals.end(), comp);
        
        // If the start of the current interval is bigger or equal than the end of our last one, we update our 
        // end, else we have an overlap so we update our answer.
        for(auto x: intervals) {
            if(x[0] >= pre_end) {
                pre_end = x[1];
            }
            else{
                ans++;
            }
        }
        
        return ans;
    }
};
