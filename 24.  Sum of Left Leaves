Find the sum of all left leaves in a given binary tree.

Example:

    3
   / \
  9  20
    /  \
   15   7

There are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.


class Solution {
public:
    bool isLeaf(TreeNode* root) {
        return root && !root->left && !root->right;
    }
    
    int sumOfLeftLeaves(TreeNode* root) {
        if(!root) return 0;
        
        return (isLeaf(root->left) ? root->left->val : sumOfLeftLeaves(root->left) ) + sumOfLeftLeaves(root->right);
    }    
};


BFS (iteration): 

class Solution {
public:
  int sumOfLeftLeaves(TreeNode* root) {
    if (!root) return 0;
    queue<TreeNode*> q{{root}};    
    int sum = 0;
    while (!q.empty()) {
      TreeNode* n = q.front(); q.pop(); 
      TreeNode* l = n->left;
      if (l) {
        if (!l->left && !l->right) sum += l->val;
        else           q.push(l);
      }
      if (n->right) q.push(n->right);
    }
    return sum;
  }
};
