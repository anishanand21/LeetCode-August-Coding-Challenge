Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

Search for a node to remove.
If the node is found, delete the node.
Note: Time complexity should be O(height of tree).

Example:

root = [5,3,6,2,4,null,7]
key = 3

    5
   / \
  3   6
 / \   \
2   4   7

Given key to delete is 3. So we find the node with value 3 and delete it.

One valid answer is [5,4,6,2,null,null,7], shown in the following BST.

    5
   / \
  4   6
 /     \
2       7

Another valid answer is [5,2,6,null,4,null,7].

    5
   / \
  2   6
   \   \
    4   7
    
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root==NULL)  return NULL;
        
        else if(key < root->val) {
            root->left = deleteNode(root->left, key);
            return root;
        }
        
        else if(key == root->val) {
            //1. node with 0 child - leaf node
            if(root->left==NULL && root->right==NULL) {
                delete root;
                return NULL;
            }
            
            //2. only 1 child
            if(root->left != NULL and root->right == NULL) {
                TreeNode* temp = root->left;
                delete root;
                return temp;
            }
            if(root->right != NULL and root->left == NULL) {
                TreeNode* temp = root->right;
                delete root;
                return temp;
            }
            
            // 2 children
            TreeNode* replace = root->right;
            //find inorder successor from right subtree
            while(replace->left != NULL) {
                replace = replace->left;
            }
            root->val = replace->val;
            root->right = deleteNode(root->right,replace->val);
            return root;
        }
        else {
            root->right = deleteNode(root->right, key);
            return root;
        }
    }
};
